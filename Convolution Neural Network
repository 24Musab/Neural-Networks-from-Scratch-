import numpy as np
import matplotlib.pyplot as plt

# functions to help in implementation 
def relu(x):
    return np.maximum(0, x)

def softmax(x):
    exp_x = np.exp(x - np.max(x))
    return exp_x / exp_x.sum(axis=0, keepdims=True)

def convolve2d(image, kernel, stride=1, padding=0):
    # Padding
    if padding > 0:
        image = np.pad(image, [(padding, padding), (padding, padding)], mode='constant')

    kernel_height, kernel_width = kernel.shape
    image_height, image_width = image.shape

    output_height = (image_height - kernel_height) // stride + 1
    output_width = (image_width - kernel_width) // stride + 1

    output = np.zeros((output_height, output_width))

    for i in range(0, output_height, stride):
        for j in range(0, output_width, stride):
            output[i, j] = np.sum(image[i:i+kernel_height, j:j+kernel_width] * kernel)

    return output

def max_pooling2d(image, pool_size=2, stride=2):
    output_height = (image.shape[0] - pool_size) // stride + 1
    output_width = (image.shape[1] - pool_size) // stride + 1
    output = np.zeros((output_height, output_width))

    for i in range(0, output_height):
        for j in range(0, output_width):
            output[i, j] = np.max(image[i*stride:i*stride+pool_size, j*stride:j*stride+pool_size])

    return output

# Example filters
filter1 = np.array([[1, 0, -1], [1, 0, -1], [1, 0, -1]])  # Edge detection
filter2 = np.array([[1, 1, 1], [0, 0, 0], [-1, -1, -1]])  # Edge detection (horizontal)

filters = [filter1, filter2]

# Example input image (grayscale)
image = np.array([
    [3, 0, 1, 2, 7, 4],
    [1, 5, 8, 9, 3, 1],
    [2, 7, 2, 5, 1, 3],
    [0, 1, 3, 1, 7, 8],
    [4, 2, 1, 6, 2, 8],
    [2, 4, 5, 2, 3, 9]
])

# Apply filters
conv_results = [convolve2d(image, filt) for filt in filters]

# Apply ReLU
relu_results = [relu(conv) for conv in conv_results]

# Apply Max Pooling
pooled_results = [max_pooling2d(relu) for relu in relu_results]

# Fully connected layer (dummy weights)
fc_input = np.concatenate([pool.flatten() for pool in pooled_results])
weights = np.random.rand(fc_input.shape[0], 10)  # Assume 10 output classes
output = softmax(np.dot(weights.T, fc_input))

# Visualize intermediate results
fig, axes = plt.subplots(3, len(filters), figsize=(12, 8))

for i in range(len(filters)):
    axes[0, i].imshow(conv_results[i], cmap='gray')
    axes[0, i].set_title(f'Conv Output {i+1}')

    axes[1, i].imshow(relu_results[i], cmap='gray')
    axes[1, i].set_title(f'ReLU Output {i+1}')

    axes[2, i].imshow(pooled_results[i], cmap='gray')
    axes[2, i].set_title(f'Pooled Output {i+1}')

plt.tight_layout()
plt.show()

print("Output of Fully Connected Layer (softmax probabilities):", output)
