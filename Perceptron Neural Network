import numpy as np
from sklearn.datasets import fetch_california_housing
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# we will use California housing dataset as example here 
data = fetch_california_housing()
X, y = data.data, data.target
scaler = StandardScaler()
X = scaler.fit_transform(X)
y = y.reshape(-1, 1)

# split 20% for validation and use the 80% for training
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Perceptron model implementation
class Perceptron:
    def __init__(self, input_dim, lr=0.01, epochs=1000):
        self.weights = np.random.randn(input_dim, 1)
        self.bias = np.zeros((1,))
        self.lr = lr
        self.epochs = epochs

    def activation(self, x):
        return np.dot(x, self.weights) + self.bias

    def train(self, X, y):
        m = len(y)
        for epoch in range(self.epochs):
            predictions = self.activation(X)
            error = predictions - y
            self.weights -= self.lr * (1/m) * np.dot(X.T, error)
            self.bias -= self.lr * (1/m) * np.sum(error)

    def predict(self, X):
        return self.activation(X)

# training 
perceptron = Perceptron(input_dim=X_train.shape[1], lr=0.01, epochs=589)
perceptron.train(X_train, y_train)

# Evaluation 
y_pred = perceptron.predict(X_test)
print("MSE:", mean_squared_error(y_test, y_pred))
